import{d7 as e,Q as t,l as a,m as n,f5 as i,f6 as o,eq as s,f7 as r,f8 as l,eg as h,J as d,b_ as m,c1 as g,c3 as c,bk as u,A as p,T as f,f9 as S,ap as T,a6 as b,K as E,aq as R,b3 as w,v,G as C,ar as y}from"./detailed_results-af0faccd.chunk.js";import{B as O,m as A,j as P,i as x,u as W,b as I,a as M,c as N,k,I as B,a7 as D,T as H,t as G}from"./individual_sim_ui-075d2254.chunk.js";const U={name:"Arms",data:e.create({talentsString:"3022032023335100102012213231251-305-2033",glyphs:t.create({major1:a.GlyphOfRending,major2:a.GlyphOfMortalStrike,major3:a.GlyphOfExecution,minor1:n.GlyphOfThunderClap,minor2:n.GlyphOfCommand,minor3:n.GlyphOfCharge})})},F={name:"Fury",data:e.create({talentsString:"32002301233-305053000520310053120500351",glyphs:t.create({major1:a.GlyphOfWhirlwind,major2:a.GlyphOfHeroicStrike,major3:a.GlyphOfExecution,minor1:n.GlyphOfBattle,minor2:n.GlyphOfBloodrage,minor3:n.GlyphOfCharge})})},j=i.create({useRend:!0,useMs:!0,useCleave:!1,useOverpower:!1,executePhaseOverpower:!1,mainGcd:o.Slam,sunderArmor:s.SunderArmorMaintain,msRageThreshold:35,hsRageThreshold:30,rendHealthThresholdAbove:20,rendRageThresholdBelow:100,slamRageThreshold:25,rendCdThreshold:0,useHsDuringExecute:!0,useBtDuringExecute:!0,useWwDuringExecute:!0,useSlamOverExecute:!0,spamExecute:!0,stanceOption:r.DefaultStance}),J=i.create({useRend:!0,useMs:!0,useCleave:!1,sunderArmor:s.SunderArmorMaintain,msRageThreshold:355,slamRageThreshold:25,hsRageThreshold:50,rendCdThreshold:0,rendHealthThresholdAbove:100,useHsDuringExecute:!0,spamExecute:!0,stanceOption:r.DefaultStance}),K=l.create({startingRage:0,useRecklessness:!0,useShatteringThrow:!0,shout:h.WarriorShoutCommanding}),_=d.create({flask:m.FlaskOfEndlessRage,food:g.FoodSpicedWormBurger,defaultPotion:c.IndestructiblePotion,prepopPotion:c.PotionOfSpeed}),q={name:"P1 Pre-Raid Fury Preset",tooltip:O,enableWhen:e=>0!=e.getTalentTree(),gear:u.fromJsonString('{"items": [\n\t\t{"id":41386,"enchant":3817,"gems":[41398,42702]},\n\t\t{"id":42645,"gems":[40003]},\n\t\t{"id":44195,"enchant":3808},\n\t\t{"id":37647,"enchant":3605},\n\t\t{"id":39606,"enchant":3832,"gems":[40003,40003]},\n\t\t{"id":44203,"enchant":3845,"gems":[0]},\n\t\t{"id":39609,"enchant":3604,"gems":[40037,0]},\n\t\t{"id":40694,"gems":[42149,42149]},\n\t\t{"id":44205,"enchant":3823},\n\t\t{"id":44306,"enchant":3606,"gems":[40037,40037]},\n\t\t{"id":42642,"gems":[42149]},\n\t\t{"id":37642},\n\t\t{"id":42987},\n\t\t{"id":40684},\n\t\t{"id":37852,"enchant":3789},\n\t\t{"id":37852,"enchant":3789},\n\t\t{"id":37191}\n\t]}')},z={name:"P1 Fury Preset",tooltip:O,enableWhen:e=>0!=e.getTalentTree(),gear:u.fromJsonString('{ "items": [\n\t\t{"id":44006,"enchant":3817,"gems":[41285,42702]},\n\t\t{"id":44664,"gems":[39996]},\n\t\t{"id":40530,"enchant":3808,"gems":[40037]},\n\t\t{"id":40403,"enchant":3605},\n\t\t{"id":40539,"enchant":3832,"gems":[42142]},\n\t\t{"id":39765,"enchant":3845,"gems":[39996,0]},\n\t\t{"id":40541,"enchant":3604,"gems":[0]},\n\t\t{"id":40205,"gems":[42142]},\n\t\t{"id":40529,"enchant":3823,"gems":[39996,40022]},\n\t\t{"id":40591,"enchant":3606},\n\t\t{"id":43993,"gems":[42142]},\n\t\t{"id":40717},\n\t\t{"id":42987},\n\t\t{"id":40256},\n\t\t{"id":40384,"enchant":3789},\n\t\t{"id":40384,"enchant":3789},\n\t\t{"id":40385}\n\t]}')},Q={name:"P2 Fury Preset",tooltip:O,enableWhen:e=>0!=e.getTalentTree(),gear:u.fromJsonString('{ "items": [\n\t\t{"id":46151,"enchant":3817,"gems":[41398,39996]},\n\t\t{"id":45517,"gems":[39996]},\n\t\t{"id":46149,"enchant":3808,"gems":[39996]},\n\t\t{"id":46032,"enchant":3605,"gems":[39996,40037]},\n\t\t{"id":46146,"enchant":3832,"gems":[39996,42702]},\n\t\t{"id":45611,"enchant":3845,"gems":[40037,0]},\n\t\t{"id":46148,"enchant":3604,"gems":[40058]},\n\t\t{"id":46095,"gems":[42154,42142,42142]},\n\t\t{"id":45536,"enchant":3823,"gems":[39996,39996,39996]},\n\t\t{"id":40591,"enchant":3606},\n\t\t{"id":45608,"gems":[39996]},\n\t\t{"id":45534,"gems":[39996]},\n\t\t{"id":42987},\n\t\t{"id":45931},\n\t\t{"id":45516,"enchant":3789,"gems":[39996,39996]},\n\t\t{"id":45516,"enchant":3789,"gems":[39996,39996]},\n\t\t{"id":45296,"gems":[39996]}\n\t]}')},L={name:"P1 Pre-Raid Arms Preset",tooltip:O,enableWhen:e=>0==e.getTalentTree(),gear:u.fromJsonString('{ "items": [\n\t\t{"id":41386,"enchant":3817,"gems":[41285,42702]},\n\t\t{"id":42645,"gems":[40002]},\n\t\t{"id":44195,"enchant":3808},\n\t\t{"id":37647,"enchant":3605},\n\t\t{"id":39606,"enchant":3832,"gems":[40002,40002]},\n\t\t{"id":41355,"enchant":3845,"gems":[0]},\n\t\t{"id":39609,"enchant":3604,"gems":[40037,0]},\n\t\t{"id":40694,"gems":[42149,42149]},\n\t\t{"id":37193,"enchant":3823,"gems":[40002,40037]},\n\t\t{"id":44306,"enchant":3606,"gems":[40086,40002]},\n\t\t{"id":42642,"gems":[42149]},\n\t\t{"id":37642},\n\t\t{"id":42987},\n\t\t{"id":40684},\n\t\t{"id":37852,"enchant":3789},\n\t\t{},\n\t\t{"id":37191}\n\t]}')},V={name:"P1 Arms Preset",tooltip:O,enableWhen:e=>0==e.getTalentTree(),gear:u.fromJsonString('{"items": [\n\t\t{"id":40528,"enchant":3817,"gems":[41398,42153]},\n\t\t{"id":44664,"gems":[39996]},\n\t\t{"id":40530,"enchant":3808,"gems":[40038]},\n\t\t{"id":40403,"enchant":3605},\n\t\t{"id":40539,"enchant":3832,"gems":[42153]},\n\t\t{"id":40330,"enchant":3845,"gems":[40002,0]},\n\t\t{"id":40541,"enchant":3604,"gems":[0]},\n\t\t{"id":40205,"gems":[42153]},\n\t\t{"id":40318,"enchant":3823,"gems":[49110,40038]},\n\t\t{"id":40591,"enchant":3606},\n\t\t{"id":43993,"gems":[40002]},\n\t\t{"id":40474},\n\t\t{"id":42987},\n\t\t{"id":40256},\n\t\t{"id":40384,"enchant":3789},\n\t\t{},\n\t\t{"id":40385}\n\t]}')},X={name:"P2 Arms Preset",tooltip:O,enableWhen:e=>0==e.getTalentTree(),gear:u.fromJsonString('{"items": [\n\t\t  {"id":46151,"enchant":3817,"gems":[41398,42142]},\n\t\t  {"id":45459,"gems":[40002]},\n\t\t  {"id":46149,"enchant":3808,"gems":[42153]},\n\t\t  {"id":46032,"enchant":3605,"gems":[39996,40037]},\n\t\t  {"id":46146,"enchant":3832,"gems":[42153,39996]},\n\t\t  {"id":45663,"enchant":3845,"gems":[39996,0]},\n\t\t  {"id":46148,"enchant":3604,"gems":[40037,0]},\n\t\t  {"id":45241,"gems":[49110,40037,39996]},\n\t\t  {"id":45536,"enchant":3823,"gems":[39996,39996,39996]},\n\t\t  {"id":45599,"enchant":3606,"gems":[40002,40002]},\n\t\t  {"id":45608,"gems":[39996]},\n\t\t  {"id":46322,"gems":[39996]},\n\t\t  {"id":46038},\n\t\t  {"id":45931},\n\t\t  {"id":45533,"enchant":3789,"gems":[39996,39996]},\n\t\t  {},\n\t\t  {"id":45296,"gems":[39996]}\n\t]}')},Y=A({fieldName:"useRecklessness",id:p.fromSpellId(1719)}),Z=A({fieldName:"useShatteringThrow",id:p.fromSpellId(64382)}),$=P({fieldName:"startingRage",label:"Starting Rage",labelTooltip:"Initial rage at the start of each iteration."}),ee=x({fieldName:"munch",label:"Munching",labelTooltip:'Apply "munching" to Deep Wounds'}),te=x({fieldName:"stanceSnapshot",label:"Stance Snapshot",labelTooltip:"Ability that is cast at the same time as stance swap will benefit from the bonus of the stance before the swap."}),ae=W({fieldName:"shout",values:[{color:"c79c6e",value:h.WarriorShoutNone},{actionId:p.fromSpellId(2048),value:h.WarriorShoutBattle},{actionId:p.fromSpellId(469),value:h.WarriorShoutCommanding}]}),ne={inputs:[I({fieldName:"useMs",label:"Use Mortal Strike",labelTooltip:"Use Mortal Strike when rage threshold is met.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>0==e.getTalentTree()&&!e.getRotation().customRotationOption}),I({fieldName:"useCleave",label:"Use Cleave",labelTooltip:"Use Cleave instead of Heroic Strike.",showWhen:e=>!e.getRotation().customRotationOption}),I({fieldName:"useRend",label:"Use Rend",labelTooltip:"Use Rend when rage threshold is met and the debuff duration is less than refresh time.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>!e.getRotation().customRotationOption}),I({fieldName:"useOverpower",label:"Use Overpower",labelTooltip:"Use Overpower whenever it is available on an open GCD.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>1==e.getTalentTree()&&!e.getRotation().customRotationOption}),M({fieldName:"mainGcd",label:"Main GCD",labelTooltip:"Main GCD ability that will be prioritized above other abilities.",values:[{name:"Slam",value:o.Slam},{name:"Bloodthirst",value:o.Bloodthirst},{name:"Whirlwind",value:o.Whirlwind}],changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>1==e.getTalentTree()&&!e.getRotation().customRotationOption}),N({fieldName:"msRageThreshold",label:"Mortal Strike rage threshold",labelTooltip:"Mortal Strike when rage is above:",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>(e.getRotation().useMs||e.getRotation().customRotationOption)&&0==e.getTalentTree()}),N({fieldName:"slamRageThreshold",label:"Slam rage threshold",labelTooltip:"Slam when rage is above:",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>(e.getRotation().useMs||e.getRotation().customRotationOption)&&0==e.getTalentTree()}),N({fieldName:"bloodsurgeDurationThreshold",label:"Exp Slam: Bloodsurge duration threshold (s)",labelTooltip:"Cast Exp Slam when Bloodsurge duration is below (seconds):",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>e.getRotation().customRotationOption&&1==e.getTalentTree()}),N({fieldName:"hsRageThreshold",label:"HS rage threshold",labelTooltip:"Heroic Strike when rage is above:"}),N({fieldName:"rendHealthThresholdAbove",label:"Rend health threshold (%)",labelTooltip:"Rend will only be used when boss health is above this value in %.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>1==e.getRotation().useRend||e.getRotation().customRotationOption}),N({fieldName:"rendRageThresholdBelow",label:"Rend rage threshold below",labelTooltip:"Rend will only be used when rage is smaller than this value.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>(1==e.getRotation().useRend||e.getRotation().customRotationOption)&&1==e.getTalentTree()}),N({fieldName:"rendCdThreshold",label:"Rend Refresh Time (s)",labelTooltip:"Refresh Rend when the remaining duration is less than this amount of time (seconds).",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>1==e.getRotation().useRend||e.getRotation().customRotationOption}),I({fieldName:"useHsDuringExecute",label:"HS during Execute Phase",labelTooltip:"Use Heroic Strike during Execute Phase."}),I({fieldName:"useBtDuringExecute",label:"BT during Execute Phase",labelTooltip:"Use Bloodthirst during Execute Phase.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>1==e.getTalentTree()}),I({fieldName:"useWwDuringExecute",label:"WW during Execute Phase",labelTooltip:"Use Whirlwind during Execute Phase.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>1==e.getTalentTree()}),I({fieldName:"useSlamOverExecute",label:"Slam during Execute Phase",labelTooltip:"Use Slam Over Execute when Bloodsurge Procs in Execute Phase.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>1==e.getTalentTree()}),I({fieldName:"executePhaseOverpower",label:"Overpower in Execute Phase",labelTooltip:"Use Overpower instead of Execute whenever it is available.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>(1==e.getRotation().useOverpower||e.getRotation().customRotationOption)&&1==e.getTalentTree()}),I({fieldName:"spamExecute",label:"Spam Execute",labelTooltip:"Use Execute whenever possible during Execute Phase.",changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter]),showWhen:e=>0==e.getTalentTree()}),M({fieldName:"sunderArmor",label:"Sunder Armor",values:[{name:"Never",value:s.SunderArmorNone},{name:"Help Stack",value:s.SunderArmorHelpStack},{name:"Maintain Debuff",value:s.SunderArmorMaintain}]}),M({fieldName:"stanceOption",label:"Stance Option",labelTooltip:"Stance to stay on. The default for Fury (Bloodthirst) is Berserker Stance and Battle Stance for everything else.",values:[{name:"Default",value:r.DefaultStance},{name:"Battle Stance",value:r.BattleStance},{name:"Berserker Stance",value:r.BerserkerStance}]}),I({fieldName:"maintainDemoShout",label:"Maintain Demo Shout",labelTooltip:"Keep Demo Shout active on the primary target."}),I({fieldName:"maintainThunderClap",label:"Maintain Thunder Clap",labelTooltip:"Keep Thunder Clap active on the primary target."}),I({fieldName:"customRotationOption",label:"Custom Rotation (Advanced)",labelTooltip:"Create your own rotation action priority list.",showWhen:e=>e.sim.getShowExperimental(),changeEmitter:e=>f.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter])}),k({fieldName:"customRotation",numColumns:3,showWhen:e=>e.getRotation().customRotationOption&&e.sim.getShowExperimental(),values:[{actionId:p.fromSpellId(23881),value:S.BloodthirstCustom},{actionId:p.fromSpellId(1680),value:S.WhirlwindCustom},{actionId:p.fromSpellId(47475),value:S.SlamCustom},{actionId:p.fromSpellId(47475),value:S.SlamExpiring,text:"Exp",showWhen:e=>1==e.getTalentTree()},{actionId:p.fromSpellId(47486),value:S.MortalStrike},{actionId:p.fromSpellId(47465),value:S.Rend},{actionId:p.fromSpellId(7384),value:S.Overpower},{actionId:p.fromSpellId(47471),value:S.Execute},{actionId:p.fromSpellId(47502),value:S.ThunderClap}]})]};class ie extends B{constructor(e,t){super(e,t,{cssClass:"warrior-sim-ui",cssScheme:"warrior",knownIssues:[],epStats:[T.StatStrength,T.StatAgility,T.StatAttackPower,T.StatExpertise,T.StatMeleeHit,T.StatMeleeCrit,T.StatMeleeHaste,T.StatArmorPenetration,T.StatArmor],epPseudoStats:[b.PseudoStatMainHandDps,b.PseudoStatOffHandDps],epReferenceStat:T.StatAttackPower,displayStats:[T.StatHealth,T.StatStamina,T.StatStrength,T.StatAgility,T.StatAttackPower,T.StatExpertise,T.StatMeleeHit,T.StatMeleeCrit,T.StatMeleeHaste,T.StatArmorPenetration,T.StatArmor],modifyDisplayStats:e=>{let t=new E;return e.getInFrontOfTarget()||(t=t.addStat(T.StatExpertise,4*e.getTalents().weaponMastery*D)),{talents:t}},defaults:{gear:Q.gear,epWeights:E.fromMap({[T.StatStrength]:2.72,[T.StatAgility]:1.82,[T.StatAttackPower]:1,[T.StatExpertise]:2.55,[T.StatMeleeHit]:.79,[T.StatMeleeCrit]:2.12,[T.StatMeleeHaste]:1.72,[T.StatArmorPenetration]:2.17,[T.StatArmor]:.03},{[b.PseudoStatMainHandDps]:6.29,[b.PseudoStatOffHandDps]:3.58}),consumes:_,rotation:j,talents:F.data,specOptions:K,raidBuffs:R.create({giftOfTheWild:w.TristateEffectImproved,swiftRetribution:!0,strengthOfEarthTotem:w.TristateEffectImproved,icyTalons:!0,abominationsMight:!0,leaderOfThePack:w.TristateEffectRegular,sanctifiedRetribution:!0,bloodlust:!0,devotionAura:w.TristateEffectImproved,stoneskinTotem:w.TristateEffectImproved}),partyBuffs:v.create({heroicPresence:!1}),individualBuffs:C.create({blessingOfKings:!0,blessingOfMight:w.TristateEffectImproved}),debuffs:y.create({bloodFrenzy:!0,heartOfTheCrusader:!0,mangle:!0,sunderArmor:!0,curseOfWeakness:w.TristateEffectRegular,faerieFire:w.TristateEffectImproved})},playerIconInputs:[ae,Y,Z],rotationInputs:ne,includeBuffDebuffInputs:[],excludeBuffDebuffInputs:[],otherInputs:{inputs:[$,ee,te,H,G]},encounterPicker:{showExecuteProportion:!0},presets:{talents:[U,F],gear:[q,z,Q,L,V,X]}})}}export{J as A,K as D,F,V as P,ie as W,U as a,_ as b,X as c,j as d,z as e,Q as f};
//# sourceMappingURL=sim-d74d891b.chunk.js.map
