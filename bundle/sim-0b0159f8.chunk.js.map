{"version":3,"file":"sim-0b0159f8.chunk.js","sources":["../../../ui/balance_druid/inputs.ts","../../../ui/balance_druid/presets.ts","../../../ui/balance_druid/sim.ts"],"sourcesContent":["import { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tBalanceDruid_Options as DruidOptions,\n\tBalanceDruid_Rotation_Type as RotationType,\n\tBalanceDruid_Rotation_MfUsage as MfUsage,\n\tBalanceDruid_Rotation_MfExtension as MfExtension,\n\tBalanceDruid_Rotation_IsUsage as IsUsage,\n\tBalanceDruid_Rotation_WrathUsage as WrathUsage,\n\tBalanceDruid_Rotation_EclipsePrio as EclipsePrio,\n} from '../core/proto/druid.js';\n\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfInnervate = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecBalanceDruid>({\n\tfieldName: 'innervateTarget',\n\tid: ActionId.fromSpellId(29166),\n\textraCssClasses: [\n\t\t'within-raid-sim-hide',\n\t],\n\tgetValue: (player: Player<Spec.SpecBalanceDruid>) => player.getSpecOptions().innervateTarget?.targetIndex != NO_TARGET,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecBalanceDruid>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tnewOptions.innervateTarget = RaidTarget.create({\n\t\t\ttargetIndex: newValue ? 0 : NO_TARGET,\n\t\t});\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n});\n\nexport const BalanceDruidRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, RotationType>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tlabelTooltip: 'Set to \\'Manual\\', to manage eclipses, spells, CDs and DoTs usage.',\n\t\t\tvalues: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Default', value: RotationType.Default,\n\t\t\t\t\ttooltip: 'The default rotation.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Manual', value: RotationType.Manual,\n\t\t\t\t\ttooltip: 'Allows custom selection of which spells to use, dot management and CD usage.',\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, EclipsePrio>({\n\t\t\tfieldName: 'eclipsePrio',\n\t\t\tlabel: 'Eclipse priority',\n\t\t\tlabelTooltip: 'Defines which eclipse will get prioritized in the rotation.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Lunar', value: EclipsePrio.Lunar },\n\t\t\t\t{ name: 'Solar', value: EclipsePrio.Solar },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, MfUsage>({\n\t\t\tfieldName: 'mfUsage',\n\t\t\tlabel: 'Moonfire Usage',\n\t\t\tlabelTooltip: 'Defines how Moonfire will be used in the rotation.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Unused', value: MfUsage.NoMf },\n\t\t\t\t{ name: 'Before lunar', value: MfUsage.BeforeLunar },\n\t\t\t\t{ name: 'Maximize', value: MfUsage.MaximizeMf },\n\t\t\t\t{ name: 'Multidot', value: MfUsage.MultidotMf },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, MfExtension>({\n\t\t\tfieldName: 'mfExtension',\n\t\t\tlabel: 'Moonfire Extension',\n\t\t\tlabelTooltip: 'When should the rotation try to extend Moonfire on the main target.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Extend always', value: MfExtension.ExtendAlways },\n\t\t\t\t{ name: 'Extend outside solar', value: MfExtension.ExtendOutsideSolar },\n\t\t\t\t{ name: 'Do not extend', value: MfExtension.DontExtend },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, IsUsage>({\n\t\t\tfieldName: 'isUsage',\n\t\t\tlabel: 'Insect Swarm Usage',\n\t\t\tlabelTooltip: 'Defines how Insect Swarm will be used in the rotation.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Unused', value: IsUsage.NoIs },\n\t\t\t\t{ name: 'Before solar', value: IsUsage.BeforeSolar },\n\t\t\t\t{ name: 'Optimize', value: IsUsage.OptimizeIs },\n\t\t\t\t{ name: 'Multidot', value: IsUsage.MultidotIs },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, WrathUsage>({\n\t\t\tfieldName: 'wrathUsage',\n\t\t\tlabel: 'Wrath usage',\n\t\t\tlabelTooltip: 'Defines how Wrath will be used in the rotation.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Unused', value: WrathUsage.NoWrath },\n\t\t\t\t{ name: 'Fishing for Lunar', value: WrathUsage.FishingForLunar },\n\t\t\t\t{ name: 'Regular', value: WrathUsage.RegularWrath },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useStarfire',\n\t\t\tlabel: 'Use Starfire',\n\t\t\tlabelTooltip: 'Should the rotation use Starfire.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useSmartCooldowns',\n\t\t\tlabel: 'Smart Cooldowns usage',\n\t\t\tlabelTooltip: 'The rotation will use cooldowns during eclipses, avoiding Haste CDs in solar and Crit CDs in lunar',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'snapshotMf',\n\t\t\tlabel: 'Snapshot Moonfire',\n\t\t\tlabelTooltip: 'The rotation will try to snapshot Moonfire with SP procs',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'eclipseShuffling',\n\t\t\tlabel: 'Eclipse Shuffling',\n\t\t\tlabelTooltip: 'Should the rotation alternate Starfire and Wrath when both eclipses are available.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useTyphoon',\n\t\t\tlabel: 'Use Typhoon',\n\t\t\tlabelTooltip: 'Should the rotation use Typhoon.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useHurricane',\n\t\t\tlabel: 'Use Hurricane',\n\t\t\tlabelTooltip: 'Should the rotation use Hurricane.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useBattleRes',\n\t\t\tlabel: 'Use Battle Res',\n\t\t\tlabelTooltip: 'Cast Battle Res on an ally sometime during the encounter.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'okfPpm',\n\t\t\tlabel: 'Owlkin Frenzy PPM',\n\t\t\tlabelTooltip: 'Amount of Owlkin Frenzy procs per minute.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t\tfloat: true,\n\t\t\tpositive: true,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'playerLatency',\n\t\t\tlabel: 'Player latency',\n\t\t\tlabelTooltip: 'Time before the player reacts to an eclipse proc, in milliseconds.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t],\n};\n","import {\n\tConsumes,\n\tDebuffs,\n\tEquipmentSpec, Explosive, Faction,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tIndividualBuffs,\n\tPartyBuffs,\n\tPotions,\n\tRaidBuffs,\n\tRaidTarget, Spec,\n\tTristateEffect\n} from '../core/proto/common.js';\nimport { SavedRotation, SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tBalanceDruid_Options as BalanceDruidOptions,\n\tBalanceDruid_Rotation as BalanceDruidRotation,\n\tBalanceDruid_Rotation_IsUsage,\n\tBalanceDruid_Rotation_MfUsage,\n\tBalanceDruid_Rotation_Type as RotationType,\n\tBalanceDruid_Rotation_WrathUsage,\n\tDruidMajorGlyph,\n\tDruidMinorGlyph,\n} from '../core/proto/druid.js';\n\nimport * as Tooltips from '../core/constants/tooltips.js';\nimport { NO_TARGET } from \"../core/proto_utils/utils\";\nimport { Player } from \"../core/player\";\nimport { APLRotation } from '../core/proto/apl.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const Phase1Talents = {\n\tname: 'Phase 1',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '5032003115331303213305311231--205003012',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfFocus,\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfInsectSwarm,\n\t\t\tmajor3: DruidMajorGlyph.GlyphOfStarfall,\n\t\t\tminor1: DruidMinorGlyph.GlyphOfTyphoon,\n\t\t\tminor2: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n\t\t\tminor3: DruidMinorGlyph.GlyphOfTheWild,\n\t\t}),\n\t}),\n};\n\nexport const Phase2Talents = {\n\tname: 'Phase 2',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '5012203115331303213305311231--205003012',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfStarfire,\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfInsectSwarm,\n\t\t\tmajor3: DruidMajorGlyph.GlyphOfStarfall,\n\t\t\tminor1: DruidMinorGlyph.GlyphOfTyphoon,\n\t\t\tminor2: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n\t\t\tminor3: DruidMinorGlyph.GlyphOfTheWild,\n\t\t}),\n\t}),\n};\n\nexport const Phase3Talents = {\n\tname: 'Phase 3',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '5102233115331303213305311031--205003002',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfStarfire,\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfMoonfire,\n\t\t\tmajor3: DruidMajorGlyph.GlyphOfStarfall,\n\t\t\tminor1: DruidMinorGlyph.GlyphOfTyphoon,\n\t\t\tminor2: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n\t\t\tminor3: DruidMinorGlyph.GlyphOfTheWild,\n\t\t}),\n\t}),\n};\n\nexport const DefaultRotation = BalanceDruidRotation.create({\n\ttype: RotationType.Default,\n\tmaintainFaerieFire: true,\n\tuseSmartCooldowns: true,\n\tmfUsage: BalanceDruid_Rotation_MfUsage.BeforeLunar,\n\tisUsage: BalanceDruid_Rotation_IsUsage.OptimizeIs,\n\twrathUsage: BalanceDruid_Rotation_WrathUsage.RegularWrath,\n\tuseStarfire: true,\n\tuseBattleRes: false,\n\tplayerLatency: 200,\n});\n\nexport const DefaultOptions = BalanceDruidOptions.create({\n\tinnervateTarget: RaidTarget.create({\n\t\ttargetIndex: NO_TARGET,\n\t}),\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tflask: Flask.FlaskOfTheFrostWyrm,\n\tfood: Food.FoodFishFeast,\n\tprepopPotion: Potions.PotionOfWildMagic,\n\tfillerExplosive: Explosive.ExplosiveSaroniteBomb,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tarcaneBrilliance: true,\n\tbloodlust: true,\n\tdivineSpirit: true,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\ticyTalons: true,\n\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\tsanctifiedRetribution: true,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\ttrueshotAura: true,\n\twrathOfAirTotem: true,\n\tdemonicPact: 500,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tblessingOfKings: true,\n\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\tvampiricTouch: true,\n});\n\nexport const DefaultPartyBuffs = PartyBuffs.create({\n\theroicPresence: false,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tbloodFrenzy: true,\n\tebonPlaguebringer: true,\n\tfaerieFire: TristateEffect.TristateEffectImproved,\n\theartOfTheCrusader: true,\n\tjudgementOfWisdom: true,\n\tshadowMastery: true,\n\tsunderArmor: true,\n\ttotemOfWrath: true,\n});\n\nexport const OtherDefaults = {\n\tdistanceFromTarget: 18,\n};\n\nexport const P2_PRESET = {\n\tname: 'P2 Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(` {\n      \"items\": [\n        {\"id\":45497,\"enchant\":3820,\"gems\":[41285,42144]},\n        {\"id\":45133,\"gems\":[40048]},\n        {\"id\":46196,\"enchant\":3810,\"gems\":[39998]},\n        {\"id\":45242,\"enchant\":3859,\"gems\":[40048]},\n        {\"id\":45519,\"enchant\":3832,\"gems\":[40051,42144,40026]},\n        {\"id\":45446,\"enchant\":2332,\"gems\":[42144,0]},\n        {\"id\":45665,\"enchant\":3604,\"gems\":[39998,39998,0]},\n        {\"id\":45619,\"gems\":[39998,39998,39998]},\n        {\"id\":46192,\"enchant\":3719,\"gems\":[39998,39998]},\n        {\"id\":45537,\"enchant\":3606,\"gems\":[39998,40026]},\n        {\"id\":46046,\"gems\":[39998]},\n        {\"id\":45495,\"gems\":[39998]},\n        {\"id\":45466},\n        {\"id\":45518},\n        {\"id\":45620,\"enchant\":3834,\"gems\":[39998]},\n        {\"id\":45617},\n        {\"id\":40321}\n      ]\n    }`),\n};\n\nexport const P1_PRESET = {\n\tname: 'P1 Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\"id\":40467,\"enchant\":3820,\"gems\":[41285,42144]},\n\t\t{\"id\":44661,\"gems\":[40026]},\n\t\t{\"id\":40470,\"enchant\":3810,\"gems\":[42144]},\n\t\t{\"id\":44005,\"enchant\":3859,\"gems\":[40026]},\n\t\t{\"id\":40469,\"enchant\":3832,\"gems\":[42144,39998]},\n\t\t{\"id\":44008,\"enchant\":2332,\"gems\":[39998,0]},\n\t\t{\"id\":40466,\"enchant\":3604,\"gems\":[39998,0]},\n\t\t{\"id\":40561,\"enchant\":3601,\"gems\":[39998]},\n\t\t{\"id\":40560,\"enchant\":3719},\n\t\t{\"id\":40519,\"enchant\":3606},\n\t\t{\"id\":40399},\n\t\t{\"id\":40080},\n\t\t{\"id\":40255},\n\t\t{\"id\":40432},\n\t\t{\"id\":40395,\"enchant\":3834},\n\t\t{\"id\":40192},\n\t\t{\"id\":40321}\n\t]}`),\n};\n\nexport const PRE_RAID_PRESET = {\n\tname: 'Pre-raid Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n\t\t{\"id\":42554,\"enchant\":3820,\"gems\":[41285,40049]},\n\t\t{\"id\":40680},\n\t\t{\"id\":37673,\"enchant\":3810,\"gems\":[42144]},\n\t\t{\"id\":41610,\"enchant\":3859},\n\t\t{\"id\":39547,\"enchant\":3832,\"gems\":[42144,40026]},\n\t\t{\"id\":37884,\"enchant\":2332,\"gems\":[0]},\n\t\t{\"id\":39544,\"enchant\":3604,\"gems\":[42144,0]},\n\t\t{\"id\":40696,\"enchant\":3601,\"gems\":[40014,39998]},\n\t\t{\"id\":37854,\"enchant\":3719},\n\t\t{\"id\":44202,\"enchant\":3606,\"gems\":[39998]},\n\t\t{\"id\":40585},\n\t\t{\"id\":43253,\"gems\":[40026]},\n\t\t{\"id\":37873},\n\t\t{\"id\":40682},\n\t\t{\"id\":45085,\"enchant\":3834},\n\t\t{\"id\":40698},\n\t\t{\"id\":40712}\n\t]}`),\n};\n\nexport const P3_PRESET_HORDE = {\n\tname: 'P3 Preset Horde',\n\tenableWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getFaction() == Faction.Horde,\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n        {\"id\":48174,\"enchant\":3820,\"gems\":[41285,40155]},\n        {\"id\":47468,\"gems\":[40155]},\n        {\"id\":48177,\"enchant\":3810,\"gems\":[40153]},\n        {\"id\":47551,\"enchant\":3722,\"gems\":[40113]},\n        {\"id\":48176,\"enchant\":3832,\"gems\":[40113,40113]},\n        {\"id\":47467,\"enchant\":2332,\"gems\":[40155,0]},\n        {\"id\":48173,\"enchant\":3604,\"gems\":[40113,0]},\n        {\"id\":47447,\"gems\":[40133,40113,40113]},\n        {\"id\":47479,\"enchant\":3719,\"gems\":[40113,40113,40113]},\n        {\"id\":47454,\"enchant\":3606,\"gems\":[40133,40113]},\n        {\"id\":47489,\"gems\":[40155]},\n        {\"id\":46046,\"gems\":[40155]},\n        {\"id\":45518},\n        {\"id\":47477},\n        {\"id\":47483,\"enchant\":3834},\n        {\"id\":47437},\n        {\"id\":47670}\n      ]\n    }`),\n};\n\nexport const P3_PRESET_ALLI = {\n\tname: 'P3 Preset Alliance',\n\tenableWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getFaction() == Faction.Alliance,\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n         {\"id\":48171,\"enchant\":3820,\"gems\":[41285,40153]},\n        {\"id\":47144,\"gems\":[40153]},\n        {\"id\":48168,\"enchant\":3810,\"gems\":[40153]},\n        {\"id\":47552,\"enchant\":3722,\"gems\":[40113]},\n        {\"id\":48169,\"enchant\":3832,\"gems\":[40113,40113]},\n        {\"id\":47066,\"enchant\":2332,\"gems\":[40113,0]},\n        {\"id\":48172,\"enchant\":3604,\"gems\":[40113,0]},\n        {\"id\":47084,\"gems\":[40133,40113,40113]},\n        {\"id\":47190,\"enchant\":3719,\"gems\":[40113,40113,40113]},\n        {\"id\":47097,\"enchant\":3606,\"gems\":[40133,40113]},\n        {\"id\":47237,\"gems\":[40113]},\n        {\"id\":46046,\"gems\":[40113]},\n        {\"id\":45518},\n        {\"id\":47188},\n        {\"id\":47206,\"enchant\":3834},\n        {\"id\":47064},\n        {\"id\":47670}\n      ]\n    }`),\n};\n\n\nexport const ROTATION_PRESET_P3_APL = {\nname: 'Basic P3 APL',\nrotation: SavedRotation.create({\n\tspecRotationOptionsJson: BalanceDruidRotation.toJsonString(DefaultRotation),\n\trotation: APLRotation.fromJsonString(`{\n      \"enabled\": true,\n      \"prepullActions\": [\n        {\"action\":{\"castSpell\":{\"spellId\":{\"otherId\":\"OtherActionPotion\"}}},\"doAt\":\"-0.5s\"}\n      ],\n      \"priorityList\": [\n        {\"action\":{\"condition\":{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"currentTime\":{}},\"rhs\":{\"const\":{\"val\":\"5\"}}}},\"castSpell\":{\"spellId\":{\"tag\":-1,\"spellId\":2825}}}},\n        {\"action\":{\"castSpell\":{\"spellId\":{\"itemId\":41119}}}},\n        {\"action\":{\"multidot\":{\"spellId\":{\"spellId\":48463},\"maxDots\":1,\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}}},\n        {\"action\":{\"condition\":{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"auraRemainingTime\":{\"auraId\":{\"spellId\":48517}}},\"rhs\":{\"const\":{\"val\":\"14.5s\"}}}},\"multidot\":{\"spellId\":{\"spellId\":48468},\"maxDots\":1,\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}}},\n        {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":65861}}}},\n        {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":53201}}}},\n        {\"action\":{\"condition\":{\"or\":{\"vals\":[{\"and\":{\"vals\":[{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"auraRemainingTime\":{\"auraId\":{\"spellId\":48518}}},\"rhs\":{\"const\":{\"val\":\"10s\"}}}},{\"cmp\":{\"op\":\"OpLe\",\"lhs\":{\"auraRemainingTime\":{\"auraId\":{\"spellId\":48518}}},\"rhs\":{\"const\":{\"val\":\"14.8\"}}}}]}},{\"cmp\":{\"op\":\"OpLt\",\"lhs\":{\"remainingTime\":{}},\"rhs\":{\"const\":{\"val\":\"12s\"}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":54758}}}},\n        {\"action\":{\"condition\":{\"or\":{\"vals\":[{\"and\":{\"vals\":[{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"auraRemainingTime\":{\"auraId\":{\"spellId\":48518}}},\"rhs\":{\"const\":{\"val\":\"10s\"}}}},{\"cmp\":{\"op\":\"OpLe\",\"lhs\":{\"auraRemainingTime\":{\"auraId\":{\"spellId\":48518}}},\"rhs\":{\"const\":{\"val\":\"14.8\"}}}}]}},{\"cmp\":{\"op\":\"OpLt\",\"lhs\":{\"remainingTime\":{}},\"rhs\":{\"const\":{\"val\":\"15s\"}}}}]}},\"castSpell\":{\"spellId\":{\"itemId\":40211}}}},\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"auraIsActive\":{\"auraId\":{\"spellId\":48518}}},{\"cmp\":{\"op\":\"OpLe\",\"lhs\":{\"auraRemainingTime\":{\"auraId\":{\"spellId\":48518}}},\"rhs\":{\"const\":{\"val\":\"14.8s\"}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":48465}}}},\n        {\"action\":{\"condition\":{\"and\":{\"vals\":[{\"auraIsActive\":{\"auraId\":{\"spellId\":48517}}},{\"cmp\":{\"op\":\"OpLe\",\"lhs\":{\"auraRemainingTime\":{\"auraId\":{\"spellId\":48517}}},\"rhs\":{\"const\":{\"val\":\"14.8s\"}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":48461}}}},\n        {\"action\":{\"condition\":{\"auraInternalCooldown\":{\"auraId\":{\"spellId\":48518}}},\"castSpell\":{\"spellId\":{\"spellId\":48465}}}},\n        {\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":48461}}}}\n      ]\n    }`),\n}),\n};","import { Spec } from '../core/proto/common.js';\nimport { Stat } from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\n\nimport * as DruidInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\n// noinspection TypeScriptValidateTypes\nexport class BalanceDruidSimUI extends IndividualSimUI<Spec.SpecBalanceDruid> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecBalanceDruid>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'balance-druid-sim-ui',\n\t\t\tcssScheme: 'druid',\n\t\t\t// List any known bugs / issues here, and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpirit,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatMP5,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatSpellPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpirit,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatMP5,\n\t\t\t],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P2_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatIntellect]: 0.43,\n\t\t\t\t\t[Stat.StatSpirit]: 0.34,\n\t\t\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.82,\n\t\t\t\t\t[Stat.StatSpellHaste]: 0.80,\n\t\t\t\t\t[Stat.StatMP5]: 0.00,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.Phase2Talents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\t\t\tpartyBuffs: Presets.DefaultPartyBuffs,\n\t\t\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\t\t\t\tdebuffs: Presets.DefaultDebuffs,\n\t\t\t\tother: Presets.OtherDefaults,\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tDruidInputs.SelfInnervate,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: DruidInputs.BalanceDruidRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.MeleeHasteBuff,\n\t\t\t\tIconInputs.MeleeCritBuff,\n\t\t\t\tIconInputs.AttackPowerPercentBuff,\n\t\t\t\tIconInputs.AttackPowerBuff,\n\t\t\t\tIconInputs.MajorArmorDebuff,\n\t\t\t\tIconInputs.MinorArmorDebuff,\n\t\t\t\tIconInputs.PhysicalDamageDebuff,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.DistanceFromTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.Phase1Talents,\n\t\t\t\t\tPresets.Phase2Talents,\n\t\t\t\t\tPresets.Phase3Talents,\n\t\t\t\t],\n\t\t\t\trotations: [\n\t\t\t\t\tPresets.ROTATION_PRESET_P3_APL,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.PRE_RAID_PRESET,\n\t\t\t\t\tPresets.P1_PRESET,\n\t\t\t\t\tPresets.P2_PRESET,\n\t\t\t\t\tPresets.P3_PRESET_HORDE,\n\t\t\t\t\tPresets.P3_PRESET_ALLI,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["SelfInnervate","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","extraCssClasses","getValue","player","getSpecOptions","innervateTarget","targetIndex","NO_TARGET","setValue","eventID","newValue","newOptions","RaidTarget","create","setSpecOptions","BalanceDruidRotationConfig","inputs","InputHelpers.makeRotationEnumInput","label","labelTooltip","values","name","value","RotationType","Default","tooltip","Manual","EclipsePrio","Lunar","Solar","showWhen","getRotation","type","MfUsage","NoMf","BeforeLunar","MaximizeMf","MultidotMf","MfExtension","ExtendAlways","ExtendOutsideSolar","DontExtend","IsUsage","NoIs","BeforeSolar","OptimizeIs","MultidotIs","WrathUsage","NoWrath","FishingForLunar","RegularWrath","InputHelpers.makeRotationBooleanInput","InputHelpers.makeRotationNumberInput","float","positive","Phase1Talents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","DruidMajorGlyph","GlyphOfFocus","major2","GlyphOfInsectSwarm","major3","GlyphOfStarfall","minor1","DruidMinorGlyph","GlyphOfTyphoon","minor2","GlyphOfUnburdenedRebirth","minor3","GlyphOfTheWild","Phase2Talents","GlyphOfStarfire","Phase3Talents","GlyphOfMoonfire","DefaultRotation","BalanceDruidRotation","maintainFaerieFire","useSmartCooldowns","mfUsage","BalanceDruid_Rotation_MfUsage","isUsage","BalanceDruid_Rotation_IsUsage","wrathUsage","BalanceDruid_Rotation_WrathUsage","useStarfire","useBattleRes","playerLatency","DefaultOptions","BalanceDruidOptions","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","prepopPotion","PotionOfWildMagic","fillerExplosive","Explosive","ExplosiveSaroniteBomb","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","bloodlust","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","icyTalons","moonkinAura","leaderOfThePack","powerWordFortitude","sanctifiedRetribution","strengthOfEarthTotem","trueshotAura","wrathOfAirTotem","demonicPact","DefaultIndividualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","blessingOfWisdom","vampiricTouch","DefaultPartyBuffs","PartyBuffs","heroicPresence","DefaultDebuffs","Debuffs","bloodFrenzy","ebonPlaguebringer","faerieFire","heartOfTheCrusader","judgementOfWisdom","shadowMastery","sunderArmor","totemOfWrath","OtherDefaults","distanceFromTarget","P2_PRESET","Tooltips.BASIC_BIS_DISCLAIMER","gear","EquipmentSpec","fromJsonString","P1_PRESET","PRE_RAID_PRESET","P3_PRESET_HORDE","enableWhen","getFaction","Faction","Horde","P3_PRESET_ALLI","Alliance","ROTATION_PRESET_P3_APL","rotation","SavedRotation","specRotationOptionsJson","toJsonString","APLRotation","BalanceDruidSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","Presets.P2_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","Presets.DefaultRotation","talents","Presets.Phase2Talents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","Presets.DefaultPartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","other","Presets.OtherDefaults","playerIconInputs","DruidInputs.SelfInnervate","rotationInputs","DruidInputs.BalanceDruidRotationConfig","includeBuffDebuffInputs","IconInputs.MeleeHasteBuff","IconInputs.MeleeCritBuff","IconInputs.AttackPowerPercentBuff","IconInputs.AttackPowerBuff","IconInputs.MajorArmorDebuff","IconInputs.MinorArmorDebuff","IconInputs.PhysicalDamageDebuff","excludeBuffDebuffInputs","otherInputs","OtherInputs.TankAssignment","OtherInputs.DistanceFromTarget","encounterPicker","showExecuteProportion","presets","Presets.Phase1Talents","Presets.Phase3Talents","rotations","Presets.ROTATION_PRESET_P3_APL","Presets.PRE_RAID_PRESET","Presets.P1_PRESET","Presets.P3_PRESET_HORDE","Presets.P3_PRESET_ALLI"],"mappings":"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"}